Perfect Numbers
Difficulty: EasyAccuracy: 17.21%Submissions: 174K+Points: 2
Given a number N, check if a number is perfect or not. A number is said to be perfect if sum of all its factors excluding the number itself is equal to the number. Return 1 if the number is Perfect otherwise return 0.

Example 1:

Input:
N = 6
Output:
1 
Explanation:
Factors of 6 are 1, 2, 3 and 6.
Excluding 6 their sum is 6 which
is equal to N itself. So, it's a
Perfect Number.
Example 2:

Input:
N = 10
Output:
0
Explanation:
Factors of 10 are 1, 2, 5 and 10.
Excluding 10 their sum is 8 which
is not equal to N itself. So, it's
not a Perfect Number.
Your Task:
You don't need to read input or print anything. Your task is to complete the function isPerfectNumber() which takes an Integer N as input and returns 1 if N is a Perfect number else returns 0.

Expected Time Complexity: O(sqrt(N))
Expected Auxiliary Space: O(1)


_________________________________________________________________________________________________________________

class Solution {
    static int isPerfectNumber(long N) {
        // code here
        if(N>0){
        int sum=0;
        for(int i=1;i<N;i++){
            if(N%i==0){
                sum+=i;
            }
        }
        if(sum==N){
            return 1;
        }
        else{
            return 0;
        }
        }
        else{
            return 0;
        }
    }
};

Your code is attempting to determine if a given number N is a perfect number. A perfect number is a positive integer that is equal to the sum of its proper divisors (excluding itself). The logic of the code is mostly correct, but there are a few improvements and optimizations that can be made:

Improvements:
Optimized Loop: You only need to check divisors up to the square root of N. For each divisor i found, you can add both i and N/i to the sum (except when i equals N/i).

Type Consistency: Ensure that the sum is calculated correctly using the right data type since N is a long.

Here's an optimized version of your function:

java
Copy code
class Solution {
    static int isPerfectNumber(long N) {
        // Edge case for non-positive numbers
        if (N <= 0) {
            return 0;
        }

        long sum = 1; // Start with 1 because 1 is a proper divisor of any number
        
        // Iterate from 2 to the square root of N
        for (long i = 2; i * i <= N; i++) {
            if (N % i == 0) {
                sum += i;
                if (i != N / i) {
                    sum += N / i;
                }
            }
        }
        
        // Check if sum of divisors equals the number itself
        if (sum == N && N != 1) {
            return 1;
        } else {
            return 0;
        }
    }
};
Explanation:
Edge Case Handling: The function now handles the case where N is less than or equal to 0, immediately returning 0 since a perfect number must be positive.

Starting the Sum with 1: We start the sum with 1 since 1 is a proper divisor of every positive integer.

Optimized Divisor Check: The loop only iterates up to the square root of N (i.e., i * i <= N). For each divisor i found, both i and N/i are added to the sum. We check that i and N/i are not the same to avoid counting a divisor twice.

Final Check: The sum is compared with N to determine if it's a perfect number, and the function returns 1 if it is, and 0 otherwise.

Time Complexity:
The time complexity of this optimized solution is approximately O(âˆšN), which is more efficient than checking every number up to N.